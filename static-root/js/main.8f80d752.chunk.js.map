{"version":3,"sources":["tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","console","log","ref","required","name","placeholder","type","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","map","item","index","Tweet","key","tweet","ActionBtn","action","setLikes","isClicked","setIsClicked","classNames","actionDisplay","display","onClick","App","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","tweetEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f80d752.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport { loadTweets } from '../lookup'\n\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        // unshift add to start of the array\n        tempNewTweets.unshift({\n            content: newVal,\n            likes: 0,\n            id: 12\n        })\n        setNewTweets(tempNewTweets)\n        console.log(newVal)\n        textAreaRef.current.value = ''\n    }\n\n    return <div className={props.className}>\n        <div className=\"col-12 mb-3\">\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet' placeholder='Tweet Here'></textarea>\n                <button type=\"submit\" className='btn btn-primary'>Tweet</button>\n            </form>\n        </div>\n        <TweetList newTweets={newTweets} />\n    </div>\n}\n\nexport function TweetList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    console.log(props.newTweets)\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n    useEffect(() => {\n        const myCallback = (response, status) => {\n            if (status === 200) {\n                // const finalTweetsInit = [...response].concat(tweetsInit)\n                setTweetsInit(response)\n            }\n        }\n        loadTweets(myCallback)\n    }, [tweetsInit])\n\n    return tweets.map((item, index) => {\n        return <Tweet key={index} tweet={item} className=\"border bg-white text-dark\" />\n    })\n}\n\nexport function ActionBtn(props) {\n    const { tweet, action } = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [isClicked, setIsClicked] = useState(tweet.isClicked === true ? true : false)\n\n    const classNames = props.className ? props.className : 'btn btn-sm btn-outline-info'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like') {\n            if (isClicked === true) {\n                setLikes(likes - 1)\n            }\n            else {\n                setLikes(likes + 1)\n            }\n            setIsClicked(!isClicked)\n            // console.log(tweet.likes + 1)\n        }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : null\n\n\n    return <button className={classNames} onClick={handleClick}> {display}</button>\n\n    // else if (action.type === 'unlike') {\n    //     return <button className='btn btn-sm btn-outline-primary '> Unlike</button>\n    // }\n    // else if (action.type === 'retweet') {\n    //     return <button className='btn btn-sm btn-outline-success '> Retweet</button>\n    // }\n}\n\n\nexport function Tweet(props) {\n    const { tweet } = props\n    // const className = props.className ? className : 'col-10 mx-auto col-md-6'\n    return <div className='border my-4 py-2 col-10 mx-auto col-md-8'>\n        <span>{tweet.id} - {tweet.content}</span>\n        <br />\n        <div className=\"btn btn-sm btn-group\">\n            <ActionBtn tweet={tweet} action={{ type: \"like\", display: \"Likes\" }} />\n            <ActionBtn tweet={tweet} action={{ type: \"unlike\", display: \"Unlike\" }} />\n            <ActionBtn tweet={tweet} action={{ type: \"retweet\", display: \"Retweet\" }} />\n        </div>\n    </div>\n}","export function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = 'http://localhost:8000/api/tweets'\n    const responseType = \"json\"\n\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function () {\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        console.log(e)\n        callback({ \"message\": \"This request is an error\" })\n    }\n    xhr.send()\n}","import React from 'react';\n// import './App.css';\nimport { TweetsComponent } from './tweets'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <div>\n          <TweetsComponent />\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { TweetsComponent } from './tweets/components'\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\n\nconst tweetEl = document.getElementById('tweetme')\nif (tweetEl) {\n  ReactDOM.render(<TweetsComponent />, tweetEl)\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}