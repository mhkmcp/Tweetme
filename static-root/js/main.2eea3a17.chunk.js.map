{"version":3,"sources":["lookup/components.js","tweets/create.js","tweets/lookup.js","tweets/buttons.js","tweets/detail.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","TweetCreate","props","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","className","onSubmit","event","preventDefault","newVal","current","value","content","ref","required","type","ActionBtn","tweet","action","didPerformAction","likes","actionDisplay","display","handleActionBackendEvent","onClick","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","window","location","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","Fragment","href","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetDidSet","useEffect","final","newTweets","concat","username","apiTweetList","handleDidRetweet","newTweet","updatedTweetsInit","unshift","updatedFinalTweets","map","item","index","key","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2eea3a17.chunk.js","sourcesContent":["function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n\nexport function backendLookup(method, endpoint, callback, data) {\n    let jsonData\n    if (data) {\n        jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n    const url = `http://localhost:8000/api${endpoint}`\n\n    xhr.responseType = \"json\"\n    const csrftoken = getCookie('csrftoken');\n    xhr.open(method, url)\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n\n    if (csrftoken) {\n        // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n    }\n\n    xhr.onload = function () {\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        console.log(e)\n        callback({ \"message\": \"This request is an error\" })\n    }\n    xhr.send(jsonData)\n}","import React from 'react'\nimport { apiTweetCreate } from './lookup'\n\n\nexport function TweetCreate(props) {\n    const textAreaRef = React.createRef()\n    const { didTweet } = props\n    const handleBackendUpdate = (response, status) => {\n        if (status === 201) {\n            didTweet(response)\n        } else {\n            console.log(response)\n            alert(\"An error occured please try again\")\n        }\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        // backend api request\n        apiTweetCreate(newVal, handleBackendUpdate)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n        <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n            </textarea>\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n        </form>\n    </div>\n}","import { backendLookup } from '../lookup'\n\n// export function apiTweetList(callback) {\n//     backendLookup('GET', '/tweets', callback)\n// }\n\nexport function apiTweetList(username, callback) {\n    let endpoint = '/tweets'\n    if (username) {\n        endpoint = `/tweets/?username=${username}`\n    }\n    backendLookup('GET', endpoint, callback)\n}\n\nexport function apiTweetDetail(tweetId, callback) {\n    backendLookup('GET', `/tweets/${tweetId}`, callback)\n}\n\nexport function apiTweetCreate(newTweet, callback) {\n    backendLookup('POST', '/tweets/create', callback, { content: newTweet })\n}\n\nexport function apiTweetAction(tweetId, action, callback) {\n    const data = { id: tweetId, action: action }\n    backendLookup('POST', '/tweets/action', callback, data)\n}","import React from 'react'\nimport { apiTweetAction } from './lookup'\n\n\nexport function ActionBtn(props) {\n    const { tweet, action, didPerformAction } = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const className = props.className ? props.className : 'btn btn-outline-info btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n\n    const handleActionBackendEvent = (response, status) => {\n        console.log(response, status)\n        if ((status === 200 || status === 201) && didPerformAction) {\n            didPerformAction(response, status)\n        }\n    }\n\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n    }\n\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n}","import React, { useState } from 'react'\n\nimport { ActionBtn } from './buttons'\n\nexport function ParentTweet(props) {\n    const { tweet } = props\n    return tweet.parent ? <div className={'row'}>\n        <div className='col-10 mx-auto p-3 border rounded'>\n            <p className='mb-0 text-muted small'>Retweet</p>\n            <Tweet hideActions className={''} tweet={tweet.parent} />\n        </div>\n    </div> : null\n}\n\nexport function Tweet(props) {\n    const { tweet, didRetweet, hideActions } = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    const className = props.className ? props.className : 'col-8 mx-auto col-md-6'\n\n    const path = window.location.pathname\n    const match = path.match(/(?<tweetid>\\d+)/)\n    const urlTweetId = match ? match.groups.tweetid : -1\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\n\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n\n    const handlePerformAction = (newActionTweet, status) => {\n        if (status === 200) {\n            setActionTweet(newActionTweet)\n        }\n        else if (status === 201) {\n            if (didRetweet) {\n                didRetweet(newActionTweet)\n            }\n        }\n    }\n\n    return <div className={className}>\n        <div>\n            <p>{tweet.id} - {tweet.content}</p>\n            <ParentTweet tweet={tweet} />\n        </div>\n        <div className=\"btn btn-group\">\n            {(actionTweet && hideActions !== true) && <React.Fragment>\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"like\", display: \"Likes\" }} />\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"unlike\", display: \"Unlike\" }} />\n                <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"retweet\", display: \"Retweet\" }} />\n            </React.Fragment>\n            }\n            {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\n        </div>\n    </div >\n}","import React, { useEffect, useState } from 'react'\n\nimport { apiTweetList } from './lookup'\nimport { Tweet } from './detail'\n\nexport function TweetList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetDidSet] = useState(false)\n\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidSet === false) {\n            const myCallback = (response, status) => {\n                if (status === 200) {\n                    setTweetsInit(response)\n                    setTweetDidSet(true)\n                } else {\n                    alert(\"There was an error\")\n                }\n            }\n            apiTweetList(props.username, myCallback)\n        }\n    }, [tweetsInit, tweetsDidSet, setTweetDidSet, props.username])\n\n    const handleDidRetweet = (newTweet) => {\n        const updatedTweetsInit = [...tweetsInit]\n        updatedTweetsInit.unshift(newTweet)\n        setTweetsInit(updatedTweetsInit)\n\n        const updatedFinalTweets = [...tweets]\n        updatedFinalTweets.unshift(tweets)\n        setTweets(updatedFinalTweets)\n    }\n\n    return tweets.map((item, index) => {\n        return <Tweet\n            tweet={item}\n            didRetweet={handleDidRetweet}\n            className='my-5 py-3 border bg-white text-dark'\n            key={`${index}-{item.id}`} />\n    })\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { TweetCreate } from './create'\nimport { Tweet } from './detail'\nimport { apiTweetDetail } from './lookup'\nimport { TweetList } from './list'\n\n\nexport function TweetsComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === \"false\" ? false : true\n    const handleNewTweet = (newTweet) => {\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift(newTweet)\n        setNewTweets(tempNewTweets)\n    }\n    return <div className={props.className}>\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n        <TweetList newTweets={newTweets} {...props} />\n    </div>\n}\n\n\nexport function TweetDetailComponent(props) {\n    const { tweetId } = props\n    const [didLookup, setDidLookup] = useState(false)\n    const [tweet, setTweet] = useState(null)\n\n    const handleBackendLookup = (response, status) => {\n        if (status === 200) {\n            setTweet(response)\n        } else {\n            alert(\"tweets/components: Not finding required tweet\")\n        }\n    }\n    useEffect(() => {\n        if (didLookup === false) {\n            apiTweetDetail(tweetId, handleBackendLookup)\n            setDidLookup(true)\n        }\n    }, [tweetId, didLookup, setDidLookup])\n\n    return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}","import React from 'react';\n// import './App.css';\nimport { TweetsComponent } from './tweets'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TweetsComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { TweetsComponent, TweetDetailComponent } from './tweets/components'\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\n\nconst e = React.createElement\nconst tweetEl = document.getElementById('tweetme')\n\nif (tweetEl) {\n  // console.log(tweetEl.dataset)\n  ReactDOM.render(e(TweetsComponent, tweetEl.dataset), tweetEl)\n}\n\nconst tweetDetailElement = document.querySelectorAll(\".tweetme-detail\")\n\ntweetDetailElement.forEach(container => {\n  ReactDOM.render(e(TweetDetailComponent, container.dataset),\n    container)\n})\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}